//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
//AT88SC0104C读写程序（C语言）
//
//2007-6-20
//使用说明书
//本程序适用于读写AT88SCxx系列器件。直接调用相应的读写函数即可完成对器件的操作。
//注意：
//●本程序仅向已签定NDA的用户提供。
//●在将AT88SC0104C焊装到电路板之前，必须先对其进行配置并在本程序的GC_TABLE/PASSWORD_TABLE填好Gc Password。
//●配置器件可使用本公司提供的参考配置文件和AT88SC0104C系列读写编程器（SC-RWP2）。
//
//1．	一般说明
//1．1 程序执行时间
//适用晶振频率范围（对51系列单片机）：10 MHz~40MHz。不同晶振频率下，完成“认证校密码选区并读出和解密16字节”所用的时间如下表所示。
//晶振频率（MHz）	12	24	36	40
//执行时间（ms）	268	142	100	92
//
//1．2 使用工作单元
//片内RAM：3AH字节
//工作寄存器：A、B、R0~R7（8字节）、DPTR
//堆栈深度：09H字节
//
//2．	访问AT88SC0104C的基本流程
//在下面的流程中，每个步骤对应一个子程序。
//只读：认证=>校验读密码=>选择用户区=>读出用户区密文数据=>解密出用户区明文数据
//只写：认证=>校验写密码=>选择用户区=>写数据到用户区
//读写交替：认证=>校验写密码=>选择用户区=>读出用户区密文数据=>解密出用户区明文数据=>写数据到用户区
//注意：
//●	解密出明文可分成多次完成或一次完成，一次完成的执行时间最少，多次完成有利于进一步提高数据的安全性。
//●	分步解密或分步写时，应保持p值和本程序所用的2AH个单元的内容不变。
//
//3．子程序调用
//p：工作单元的起始地址（STU）
//3．1认证
//程序名：AUTHENTICATION();
//入口条件：
//工作单元	内容	备注
//STU+1	套数序号	于程序中“GC_TABLE”标号处顺序安排（0~3套）密钥和密码；bit5-bit4设置Gc套数序号,bit3-bit0设置Password套数序号 
//认证后，释放p+2A到p+39单元
//
//3．2校验密码
//程序名：verify_write_password();verify_read_password();
//入口条件：
//工作单元	内容	备注
//STU+1	套数序号	于程序中“GC_TABLE”标号处顺序安排（0~3套）密钥和密码；bit5-bit4设置Gc套数序号,bit3-bit0设置Password套数序号 
//
//3．3选择用户区
//程序名：set_user_zone();
//入口条件：
//工作单元	内容	备注
//STU	用户分区号	选择用户区
//
//3．4读用户区数据
//程序名：read_user_zone();
//入口条件：
//工作单元	内容	备注
//STU+2	读用户区的起始地址	
//STU+3	读用户区的结束地址	
//STU+4	读出的密文存放地址	
//
//3．5解密出明文
//程序名：decrypto_data(解密密文字节数)
//入口条件：
//工作单元	内容	备注
//STU+5	解出的明文存放地址	
//
//3．6写数据到用户区
//程序名：write_user_zone();
//入口条件：
//工作单元	内容	备注
//STU+7	写用户区的起始地址	
//STU+8	写用户区的结束地址	
//STU+9	写明文入口地址	
//如分步解密或数据分步写时中间嵌入其它程序,应保持p值与本程序所用的2AH个单元不变;
//如读出的密文未解完，不得改变密文值，也不得进行写操作
//密文和明文不能存放在 地址值为p到p+29H之间;
//
//3．7读配置区数据
//程序名：read_system();
//入口条件：
//工作单元	内容	备注
//STU+2	读配置区的起始地址	
//STU+3	读配置区的结束地址	
//STU+4	读出的数据存放地址	
//
//3．8写数据到配置区
//程序名：write_system();
//入口条件：
//工作单元	内容	备注
//STU+7	写配置区的起始地址	
//STU+8	写配置区的结束地址	
//STU+9	待写的数据的入口地址	
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#ifndef AT88SC_H     //Header sentry
#define AT88SC_H

#include "common.h"


#define AT88SC_COMMAND_WUZ		0xB0	//AT88SC的命令 写用户区
#define AT88SC_COMMAND_RUZ		0xB2	//AT88SC的命令 读用户区
#define AT88SC_COMMAND_WSZ		0xB4	//AT88SC的命令 写系统区
#define AT88SC_COMMAND_RSZ		0xB6	//AT88SC的命令 读系统区
#define AT88SC_COMMAND_VC		0xB8	//AT88SC的命令 检查
#define AT88SC_COMMAND_VP		0xBA	//AT88SC的命令 读写密码
/*
#define AT88SC_COMMAND_WUZ		0x80	//AT88SC的命令 写用户区
#define AT88SC_COMMAND_RUZ		0x82	//AT88SC的命令 读用户区
#define AT88SC_COMMAND_WSZ		0x84	//AT88SC的命令 写系统区
#define AT88SC_COMMAND_RSZ		0x86	//AT88SC的命令 读系统区
#define AT88SC_COMMAND_VC		0x88	//AT88SC的命令 检查
#define AT88SC_COMMAND_VP		0x8A	//AT88SC的命令 读写密码
*/

#define AT88SC_MTZ_ADDR			0x0A	//AT88SC的MTZ地址
#define AT88SC_MTZ_LEN			0x02	//AT88SC的MTZ数据长度

#define AT88SC_NC_ADDR			0x19	//AT88SC的MTZ地址
#define AT88SC_NC_LEN			0x07	//AT88SC的MTZ数据长度

#define AT88SC_Ci0_ADDR			0x50	//
#define AT88SC_Ci0_LEN			0x08	//

#define AT88SC_KS_0			0xBA	//固定参数KS的长度是随意定义的(现定为4个字节)
#define AT88SC_KS_1			0xDC
#define AT88SC_KS_2			0xB4
#define AT88SC_KS_3			0x8A

typedef unsigned char BYTE;


typedef unsigned int  WORD;

#ifndef FALSE			/* in case these macros already exist */
#define FALSE	0		/* values of boolean */
#endif

#ifndef TRUE
#define TRUE	1
#endif

typedef struct
{
	BYTE	CMstate;	//AT88SC的当前状态:位7:标准(0)/认证(1)状态  位6:为1时是加密激活
				//位5:PAC错(0),位4:AAC错(0);位3:0的4位表示认证过程到了哪一步。
	// state var	
	BYTE	din_gpa;	//GPA Input Byte
	BYTE	gpa_byte;	//GPA Output Byte
	BYTE	R[7];	//7个字节 5位宽
	BYTE	S[7];	//7个字节 7位宽
	BYTE	T[5];	//5个字节 5位宽


	// key var
	BYTE	Q[8];		//主机随机数	Q
	BYTE	CH[8];		//验证数据	CH
	BYTE	Ci[8];		//密文		Ci
	BYTE	G[8];		//密码种子	G
	BYTE	SK[8];		//参数		SK
} AT88SC_STATE;

typedef enum _REQ_AT88SC
{
	REQ_AT88SC_NONSUPPORT,		//保留(不支持)

	//直接对AT88SC的操作
	REQ_AT88SC_WUZ,			//AT88SC的命令 写用户区
	REQ_AT88SC_RUZ,			//AT88SC的命令 读用户区
	REQ_AT88SC_WSZ,			//AT88SC的命令 写系统区
	REQ_AT88SC_RSZ,			//AT88SC的命令 读系统区

	REQ_AT88SC_TEST
} REQ_AT88SC;



//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//  初始化AT88SC
void At88scInit();

//  主机随机数发生器
void HostRandomNumber(BYTE *buf);	//输出8个字节的随机数据	

//  自定义算法F1
void ArithmeticF1(BYTE *OUTbuf_G);//输出8个字节的数据 G	


//AT88SC的GPA操作子程序 函数原型

void SetInit(BYTE *Ci, BYTE *G, BYTE *Q);
void Authenticate(BYTE *CH, BYTE *NEW_Ci, BYTE *SK);
void Read(WORD Addr, BYTE NOB, unsigned char *Data, WORD sys);
void Write(BYTE A1, BYTE A2, BYTE NOB, unsigned char *Data, WORD sys);
void SetUserZone(BYTE zone);
void SendChecksum(BYTE *ch1, BYTE *ch2);
void ReadChecksum(BYTE *ch1, BYTE *ch2);
void VerifyPassword(BYTE *pw, BYTE *epw);



//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//  高级的随机数发生器
//程序名：AdvancedRand();
BYTE AdvancedRand(BYTE min, BYTE max);


//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//3．1认证
//程序名：AUTHENTICATION();
//入口条件：
//工作单元	内容	备注
//STU+1	套数序号	于程序中"GC_TABLE"标号处顺序安排（0~3套）密钥和密码；bit5-bit4设置Gc套数序号,bit3-bit0设置Password套数序号 
//认证后，释放p+2A到p+39单元
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL AT88SC_Authentication(BYTE Value);

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//3．2校验密码
//程序名：verify_write_password();verify_read_password();
//入口条件：
//工作单元	内容	备注
//STU+1	套数序号	于程序中"GC_TABLE"标号处顺序安排（0~3套）密钥和密码；bit5-bit4设置Gc套数序号,bit3-bit0设置Password套数序号 
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL AT88SC_verify_write_password();
BOOL AT88SC_verify_read_password();



//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//3．3选择用户区
//程序名：set_user_zone();
//入口条件：
//工作单元	内容	备注
//STU	用户分区号	选择用户区
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL AT88SC_set_user_zone();




//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//3．4读用户区数据
//程序名：read_user_zone();
//入口条件：
//工鞯ピ?内容	备注
//STU+2	读用户区的起始地址	
//STU+3	读用户区的结束地址	
//STU+4	读出的密文存放地址	
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void AT88SC_Read_user_zone(WORD addr, BYTE length, BYTE *buf);

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//3．5解密出明文
//程序名：decrypto_data(解密密文字节数)
//入口条件：
//工作单元	内容	备注
//STU+5	解出的明文存放地址	
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL AT88SC_decrypto_data(BYTE *buf);


//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//3．6写数据到用户区
//程序名：write_user_zone();
//入口条件：
//工作单元	内容	备注
//STU+7	写用户区的起始地址	
//STU+8	写用户区的结束地址	
//STU+9	写明文入口地址	
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void AT88SC_Write_user_zone(WORD addr, BYTE length, BYTE *buf);




//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//3．7读配置区数据
//程序名：read_system();
//入口条件：
//工作单元	内容	备注
//STU+2	读配置区的起始地址	
//STU+3	待读出的数据长度
//STU+4	读出的数据存放地址	
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void AT88SC_Read_system(WORD addr, BYTE length, BYTE *buf);




//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//3．8写数据到配置区
//程序名：write_system();
//入口条件：
//工作单元	内容	备注
//STU+7	写配置区的起始地址	
//STU+8	待写入的数据长度	
//STU+9	待写的数据的入口地址	
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void AT88SC_Write_system(WORD addr, BYTE length, BYTE *buf);


void Clock_Gpa(unsigned char Data);

int At88Sc0104Access();

//返回1:加密校验成功 0:加密校验失败
int At88Sc0104Statue();
#endif   // AT88SC
